/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 tree.glb
*/

import React, { useRef } from "react";
import { useGLTF, Edges } from "@react-three/drei";
// import { useControls, folder, Leva } from "leva";
import { EffectComposer, Outline, Select } from "@react-three/postprocessing";
import { useFrame } from "@react-three/fiber";

export default function CityModel03(props) {
  const { nodes, materials, scene } = useGLTF("/models/city/citymodel07.glb");
  const meshes = Object.values(nodes).filter((n) => n.type === "Mesh");
  console.log("nodes", nodes);
  const group = useRef();

  useFrame((state, delta) => {
    // console.log("first", state.events);
    // group;
    // group.current.rotation.y += 0.01;
  });

  //leva GUI组件库 https://github.com/pmndrs/leva
  const config = {
    skirtColor: "#fdd452",
    towerColor: "#ffac1b",
    greenColor: "#d2e4ae",
    roadColor: "#bebdc2",
    treeColor: "#819526",
    carColor: "#f8f351",
    waterColor: "#57939d",
    siteColor: "#dcd9df",
  };

  // 设置模型的材质和阴影属性
  scene.traverse((child) => {
    if (child.isMesh) {
      child.castShadow = true;
      child.receiveShadow = true;
      child.material.side = 2; // 设置材质为双面显示
    }
  });

  return (
    <group
      {...props}
      dispose={null}
      onClick={(e) => {
        console.log("group", e.intersections[0].object.parent.name);
      }}
    >
      {/* //site */}
      {/* <mesh
        geometry={nodes.site.geometry}
        material={materials["site"]}
        castShadow
        receiveShadow
      >
        <Edges scale={1} threshold={15} color='#F00' lineWidth={20} />
      </mesh> */}
      <Select enabled={config.all}>
        <Select name="center" enabled={config.center}>
          {/* //skirt */}
          {meshes
            .filter((v) => v.parent.name.includes("skirt"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={config.skirtOpacity}
                    color={config.skirtColor}
                    // opacity={0.95}
                    // color="#F0F"
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color="#000" />
                </mesh>
              );
            })}
          {/* //tower */}
          {meshes
            .filter((v) => v.name.includes("tower"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                  onClick={(e) => {
                    console.log("click tower", item.userData.name);
                  }}
                  // onClick={ console.log("click tower", item.userData.name)}
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={config.towerOpacity}
                    color={config.towerColor}
                    // opacity={0.95}
                    // color="#FF0"
                  />
                  <Edges scale={1} threshold={15} color="#999" />
                </mesh>
              );
            })}
        </Select>
        <Select name="green" enabled={config.green}>
          {/* //building */}
          {meshes
            .filter((v) => v.parent.name.includes("green"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    opacity={config.greenOpacity}
                    color={config.greenColor}
                    // opacity={0.7}
                    // color='#AAA'
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color="#AAA" />
                </mesh>
              );
            })}
        </Select>
        <Select name="road">
          {/* road */}
          {meshes
            .filter((v) => v.parent.name.includes("road"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={0.7}
                    color={config.roadColor}
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color="#AAA" />
                </mesh>
              );
            })}
        </Select>
        <Select name="tree">
          {/* tree */}
          {meshes
            .filter((v) => v.name.includes("tree"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={0.7}
                    color={config.treeColor}
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color="#AAA" />
                </mesh>
              );
            })}
        </Select>
        <Select name="car">
          {/* car */}
          {meshes
            .filter((v) => v.parent.name.includes("car"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={0.7}
                    color={config.carColor}
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color="#AAA" />
                </mesh>
              );
            })}
        </Select>
        <Select name="water">
          {/* water */}
          {meshes
            .filter((v) => v.parent.name.includes("water"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={0.7}
                    color={config.waterColor}
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color="#AAA" />
                </mesh>
              );
            })}
        </Select>
        <Select name="site">
          {/* site */}
          {meshes
            .filter((v) => v.parent.name.includes("site"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={0.7}
                    color={config.siteColor}
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color="#AAA" />
                </mesh>
              );
            })}
        </Select>
      </Select>
      {/* <Select enabled={config.all}>
        <primitive
          object={scene}
          {...props}
          castShadow
          receiveShadow
          onClick={(e) => console.log("click")}
        />
      </Select> */}
    </group>
  );
}

useGLTF.preload("models/city/citymodel07.glb");
