/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 tree.glb
*/

import React, { useEffect, useImperativeHandle, useRef } from "react";
import { useGLTF, Edges } from "@react-three/drei";
// import { useControls, folder, Leva } from "leva";
import { EffectComposer, Outline, Select } from "@react-three/postprocessing";
import { useThree } from "@react-three/fiber";
import { GLTFExporter } from "three/examples/jsm/exporters/GLTFExporter";
import { saveAs } from "file-saver";
import { useDispatch } from "react-redux";

const ParkModel00 = React.forwardRef((props, ref) => {
  //导出模型
  const { scene, gl } = useThree();

  const exportGLTF = () => {
    const exporter = new GLTFExporter();
    exporter.parse(
      scene,
      (gltf) => {
        const output = JSON.stringify(gltf, null, 2);
        console.log("output", output);
        const blob = new Blob([output], { type: "text/plain" });
        // saveAs(blob, "scene.gltf");
      },
      { binary: false }
    );
  };
  // exportGLTF();

  const sayHello = () => {
    alert("Hello from child component!");
  };

  const exportGLB = () => {
    const exporter = new GLTFExporter();
    exporter.parse(
      scene,
      (gltf) => {
        const output = JSON.stringify(gltf, null, 2);
        console.log("output", output);
        console.log("gltf", gltf);
        console.log("scene", scene);
        const blob = new Blob([output], {
          type: "application/octet-stream",
        });
        saveAs(blob, "scene.glb");
      },
      { onlyVisible: false, binary: true }
    );
  };

  useImperativeHandle(ref, () => ({
    sayHello: sayHello,
    exportGLB: exportGLB,
  }));

  //导入模型
  const { nodes } = useGLTF("models/park/parkmodel00.glb");
  const meshes = Object.values(nodes).filter((n) => n.type === "Mesh");
  // console.log("nodes", nodes);
  // console.log("meshes", meshes);

  //leva GUI组件库 https://github.com/pmndrs/leva
  // const config = useControls({
  //   center: { value: true },
  //   skirtColor: { value: "#57939d" },
  //   towerColor: { value: "#6f8893" },
  //   greenColor: { value: "#d2e4ae" },
  //   groundColor: { value: "#55646b" },
  //   roadColor: { value: "#f8f8f8" },
  //   treeColor: { value: "#a2c332" },
  //   buildColor: { value: "#dcd9df" },
  //   waterColor: { value: "#9dd6f1" },
  //   siteColor: { value: "#f8f0ba" },
  // });
  const config = {
    center: true,
    skirtColor: "#57939d",
    towerColor: "#6f8893",
    greenColor: "#d2e4ae",
    groundColor: "#55646b",
    roadColor: "#f8f8f8",
    treeColor: "#a2c332",
    buildColor: "#dcd9df",
    waterColor: "#9dd6f1",
    siteColor: "#f8f0ba",
  };

  // 设置模型的材质和阴影属性
  // scene.traverse((child) => {
  //   if (child.isMesh) {
  //     child.castShadow = true;
  //     child.receiveShadow = true;
  //     child.material.side = 2; // 设置材质为双面显示
  //   }
  // });

  return (
    <group {...props} dispose={null}>
      <Select enabled={config.all}>
        <Select name='center' enabled={config.center}>
          {/* //skirt */}
          {meshes
            .filter((v) => v.parent.name.includes("skirt"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={config.skirtOpacity}
                    color={config.skirtColor}
                    // opacity={0.95}
                    // color="#F0F"
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color='#000' />
                </mesh>
              );
            })}
          {/* //tower */}
          {meshes
            .filter((v) => v.name.includes("tower"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={config.towerOpacity}
                    color={config.towerColor}
                    // opacity={0.95}
                    // color="#FF0"
                  />
                  <Edges scale={1} threshold={15} color='#999' />
                </mesh>
              );
            })}
        </Select>
        <Select name='green' enabled={config.green}>
          {/* green */}
          {meshes
            .filter((v) => v.name.includes("green"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    opacity={config.greenOpacity}
                    color={config.greenColor}
                    // opacity={0.7}
                    // color='#AAA'
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color='#AAA' />
                </mesh>
              );
            })}
        </Select>
        <Select name='ground'>
          {/* ground */}
          {meshes
            .filter((v) => v.name.includes("ground"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={0.7}
                    color={config.roadColor}
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color='#AAA' />
                </mesh>
              );
            })}
        </Select>
        <Select name='road'>
          {/* road */}
          {meshes
            .filter((v) => v.name.includes("road"))
            .map((item, index) => {
              return (
                <mesh
                  key={item.uuid}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={0.7}
                    color={config.roadColor}
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color='#AAA' />
                </mesh>
              );
            })}
        </Select>
        <Select name='tree'>
          {/* tree */}
          {meshes
            .filter((v) => v.name.includes("tree"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={0.7}
                    color={config.treeColor}
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color='#AAA' />
                </mesh>
              );
            })}
        </Select>
        <Select name='building'>
          {/* building */}
          {meshes
            .filter((v) => v.name.includes("building"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={0.7}
                    color={config.buildingColor}
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color='#AAA' />
                </mesh>
              );
            })}
        </Select>
        <Select name='water'>
          {/* water */}
          {meshes
            .filter((v) => v.name.includes("water"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={0.7}
                    color={config.waterColor}
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color='#AAA' />
                </mesh>
              );
            })}
        </Select>
        <Select name='site'>
          {/* site */}
          {meshes
            .filter((v) => v.name.includes("site"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    // opacity={0.7}
                    color={config.siteColor}
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color='#AAA' />
                </mesh>
              );
            })}
        </Select>
      </Select>

      {/* <Select enabled={config.all}>
        <primitive
          object={scene}
          {...props}
          castShadow
          receiveShadow
          onClick={(e) => console.log("click")}
        />
      </Select>  */}
    </group>
  );
});

export default ParkModel00;
ParkModel00.displayName = "ParkModel00";

useGLTF.preload("models/park/parkmodel00.glb");
