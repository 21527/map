/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 tree.glb
*/

import React, { useRef } from "react";
import { useGLTF, Edges } from "@react-three/drei";
import { useControls, folder, Leva } from "leva";
import { EffectComposer, Outline, Select } from "@react-three/postprocessing";

export default function CityModel0101(props) {
  const { nodes, materials, scene } = useGLTF("models/city/model0101.glb");
  const meshes = Object.values(nodes).filter((n) => n.type === "Mesh");
  const group = useRef();
  //leva GUI组件库 https://github.com/pmndrs/leva

  const config = useControls({
    Outline: folder(
      {
        center: { value: true },
        // tower: { value: true },
        building: { value: false },
      },
      { collapsed: false }
    ),
    Skirt: folder({
      skirtColor: { value: "#fdd452" },
      skirtOpacity: { min: 0.0, max: 1.0, value: 0.95 },
    }),
    Tower: folder({
      towerColor: { value: "#ffac1b" },
      towerOpacity: { min: 0.0, max: 1.0, value: 0.95 },
    }),
  });

  // 设置模型的材质和阴影属性
  scene.traverse((child) => {
    if (child.isMesh) {
      child.castShadow = true;
      child.receiveShadow = true;
      child.material.side = 2; // 设置材质为双面显示
    }
  });

  return (
    <group {...props} dispose={null}>
      {/* //site */}
      {/* <mesh
        geometry={nodes.site.geometry}
        material={materials["site"]}
        castShadow
        receiveShadow
      >
        <Edges scale={1} threshold={15} color='#F00' lineWidth={20} />
      </mesh> */}
      <Select enabled={config.all}>
        <Select name='center' enabled={config.center}>
          {/* //skirt */}
          {meshes
            .filter((v) => v.name.includes("skirt"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    opacity={config.skirtOpacity}
                    color={config.skirtColor}
                    // opacity={0.95}
                    // color="#F0F"
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color='#000' />
                </mesh>
              );
            })}
          {/* //tower */}
          {meshes
            .filter((v) => v.name.includes("tower"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    opacity={config.towerOpacity}
                    color={config.towerColor}
                    // opacity={0.95}
                    // color="#FF0"
                  />
                  <Edges scale={1} threshold={15} color='#999' />
                </mesh>
              );
            })}
        </Select>
        <Select name='building' enabled={config.building}>
          {/* //building */}
          {meshes
            .filter((v) => v.name.includes("building"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    opacity={0.7}
                    color='#AAA'
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color='#AAA' />
                </mesh>
              );
            })}
        </Select>
        <Select name='ground'>
          {/* //ground */}
          {meshes
            .filter((v) => v.name.includes("ground"))
            .map((item, index) => {
              return (
                <mesh
                  key={index}
                  geometry={item.geometry}
                  castShadow
                  receiveShadow
                >
                  <meshStandardMaterial
                    transparent
                    opacity={0.7}
                    color='#AAA'
                  />
                  {/* <customOtherShaderMaterial attach="material" /> */}
                  <Edges scale={1} threshold={15} color='#AAA' />
                </mesh>
              );
            })}
        </Select>
      </Select>
      <Select enabled={config.all}>
        <primitive
          object={scene}
          {...props}
          castShadow
          receiveShadow
          onClick={(e) => console.log("click")}
        />
      </Select>
    </group>
  );
}

useGLTF.preload("models/city/model0101.glb");
